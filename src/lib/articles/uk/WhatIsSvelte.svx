
<img src="/assets/images/svelte-code.jpg" alt="Hero" class="aspect-video mb-4 rounded-xl" />

# Еволюція Svelte та трохи його передісторії

Щоб почати цей блог зі статті про те, що ж таке саме Svelte, як на мене, є найлогічнішим варіантом. Тут я розповім трохи про те, чому <a href="https://github.com/rich-harris" target="_blank">Річ Гарріс</a> вирішив його створити. Які потреби покривала перша версія. Та як змінювався погляд на Svelte в цілому.

### Чому Річ Гарріс вирішив створити Svelte?

<img src="https://avatars.githubusercontent.com/u/1162160?v=4" alt="Rich Harris" class="aspect-square mx-auto my-5 rounded-xl" />

Гадаю, тут краще почати з того, хто такий <a href="https://github.com/rich-harris" target="_blank">Річ Гарріс</a>.

Svelte — це не перший opensource проект, що був створений Річом. До цього він створив <a href="https://github.com/rollup/rollup" target="_blank">Rollup</a>, популярний JavaScript бандлер, який навіть зараз користується попитом серед розробників та має 25к зірок в своєму гітхаб репозиторії.

Окрім цього, Річ працював журналістом в таких великих виданнях, як <a href="https://www.nytimes.com/by/rich-harris" target="_blank">The New York Times</a> та <a href="https://www.theguardian.com/profile/rich-harris" target="_blank">The Guardian</a>.

З останніми він навіть був частиною інтерактивної команди, що виграла Нагороду Емі.

Він стояв саме за візуалізацією даних, які презентувалися в статті, що в свою чергу сильно вплинуло на Svelte, так як він з коробки має дуже сильну підтримку анімацій.

Під час роботи в The New York Times він і розпочав свою роботу над <a href="https://github.com/sveltejs/svelte" target="_blank">Svelte</a>. Як і всі ми, банально для того, щоб спростити свою роботу над статтями.

### Що таке Svelte?

> "Write less, do more"

Цей принцип і досі стоїть в основі розробки Svelte. Саме цей принцип так мені подобається :)

Занурюючись глибше в те, що таке Svelte, то головна думка розробника була показати, що нам не потрібно робити великі над абстракції, щоб написати гарний інтерактивний інтерфейс.

І в нього це вийшло, на мою думку. Як каже сам Річ, JavaScript — це погана мова для описання інтерфейсів, і це дійсно так. Вона ніколи для цього не була призначена.

А от HTML — це найкраща мова для опису інтерфейсів.

Отже, було зроблено акцент саме на HTML, де JavaScript був лише помічником для інтерактивності. В принципі, Річ тут повернувся до витоків веб-розробки, до буму JavaScript фреймворків.

Отже, нарешті підходимо до відповіді на питання, що ж таке Svelte?

```svelte
<script>
	let name = $state('world');
</script>

<main>
	<h1>Hello {name}!</h1>
</main>

<style>
	h1 {
		color: purple;
	}
</style>
```

Найпростіше це мова програмування, яка компілюється у оптимізований HTML/CSS/JavaScript код.

І як ви бачите з прикладу зверху, пишете ви також звичайний HTML/CSS/JavaScript, просто з невеликими вкрапленнями самого Svelte.

Що з цікавого, всі стилі в компонентах йдуть одразу інкапсульовані, тому якщо ви не фанат Tailwind, то у вас не буде жодних проблем з написанням власних стилів, та вам не потрібно буде якось самостійно їх інкапсулювати.

### В чому тоді різниця від інших?

Різниця у підході до інтерактивності. Зараз найбільші фреймворки йдуть шляхом Virtual DOM.

Що, по суті, є об'єктом в JavaScript, який зберігає копію реального DOM та при кожній зміні стану порівнює різницю між віртуальним та справжнім DOM для того, щоб зробити зміни саме в потрібному місці, не чіпаючи весь інший DOM.

Простими словами: перерендерити саме той компонент, який змінився, не чіпаючи всі інші. Це ефективний підхід, та й зараз він працює добре.

Svelte ж, на відміну від інших, слідкує саме за значенням. Та на етапі компіляції визначає саме реактивні зміни, які потрібно прослуховувати на зміну та змінює саме їх в коді.

Тобто якщо ми візьмемо до прикладу звичайний лічильник і будемо змінювати його значення, то у випадку з React ми побачимо, що змінюється увесь компонент, тоді як у випадку зі Svelte змінюється виключно саме значення, розмітка компоненту залишатиметься незмінною.

##### Компонент лічильника на Svelte 5

```svelte
<script>
	let counter = $state(0);
</script>

<div class="flex gap-4">
	<button onclick={() => counter -= 1}> - </button>
	<span>
		{counter}
	</span>
	<button onclick={() => counter += 1}> + </button>
</div>
```

<br />

##### Компонент лічильника на React

```jsx
import React, { useState } from 'react';

function Counter() {
	const [counter, setCounter] = useState(0);

	return (
		<div className="flex gap-4">
			<button onClick={() => setCounter(counter - 1)}>-</button>
			<span>{counter}</span>
			<button onClick={() => setCounter(counter + 1)}>+</button>
		</div>
	);
}

export default Counter;
```

Це, в свою чергу, дає нам кращий перформанс. Так, знаю англіцизм, але що поробиш.

### Руни (Runes) тепер Svelte це React?

З виходом Рун багато хто підмітив схожість синтаксису Svelte з React. Спершу я також це помітив та плювався, але це все ж таки не те.

Рунами команда Svelte прибрала "Магію", яка була в коді, коли звичайний `let` ставав реактивним.

Додали багато підтримки до шаблонів, тепер є вбудована підтримка TS з коробки.

І в цілому, Svelte пройшов великий шлях від фреймворка, який був зроблений для візуалізації даних в статтях, до універсального, потужного інструменту, який дозволяє тобі писати код як звичайний JavaScript та отримувати від цього задоволення.

Про нововведення в Svelte 5 ми з вами поговоримо в наступному пості, де я поділюсь напевно найбільш радісними для мене змінами.

### Підсумки

Якщо ця стаття зацікавила вас настільки, щоб самим глянути, що таке Svelte, будь ласка, зайдіть на їх <a href="https://svelte.dev/" target="_blank">сайт</a> та поклацайте все самі, вам сподобається.

